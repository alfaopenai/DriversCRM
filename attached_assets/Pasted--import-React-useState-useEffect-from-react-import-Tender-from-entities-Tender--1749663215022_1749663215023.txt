
import React, { useState, useEffect } from 'react';
import { Tender } from '@/entities/Tender';
import { Driver } from '@/entities/Driver';
import { Client } from '@/entities/Client';
import { Channel } from '@/entities/Channel';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Pencil, CircleDollarSign } from 'lucide-react';

export default function NewDeliveryModal({ setOpen, onDeliveryCreated }) {
  const [formData, setFormData] = useState({
    channel_id: 'all_channels',
    service_type: 'delivery',
    assigned_driver_id: 'dispatcher',
    client_type: 'casual',
    client_id: '',
    contact_phone: '',
    origin_address: '',
    origin_city: '',
    destination_address: '',
    destination_city: '',
    is_immediate: true,
    price: '',
    notes: '',
  });
  const [drivers, setDrivers] = useState([]);
  const [clients, setClients] = useState([]);
  const [channels, setChannels] = useState([]);
  const [filteredClients, setFilteredClients] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const [driversData, clientsData, channelsData] = await Promise.all([
        Driver.list(),
        Client.list(),
        Channel.list()
      ]);
      setDrivers(driversData);
      setClients(clientsData);
      setChannels(channelsData);
      setFilteredClients(clientsData.filter(c => c.status === 'casual'));
    };
    fetchData();
  }, []);
  
  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  
  const handleClientTypeChange = (value) => {
    handleChange('client_type', value);
    handleChange('client_id', '');
    handleChange('contact_phone', '');
    setFilteredClients(clients.filter(c => c.status === value));
  };
  
  const handleClientChange = (clientId) => {
    const client = clients.find(c => c.id === clientId);
    if (client) {
        handleChange('client_id', clientId);
        handleChange('contact_phone', client.phone);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation for required fields
    if (!formData.contact_phone) {
      alert('נא למלא טלפון ליצירת קשר');
      return;
    }
    if (!formData.origin_address || !formData.origin_city) {
      alert('נא למלא כתובת ועיר מוצא');
      return;
    }
    if (!formData.destination_address || !formData.destination_city) {
      alert('נא למלא כתובת ועיר יעד');
      return;
    }
    if (!formData.price) {
      alert('נא למלא סכום לתשלום');
      return;
    }

    const driver = drivers.find(d => d.id === formData.assigned_driver_id);
    const client = clients.find(c => c.id === formData.client_id);

    const tenderData = {
        name: `${formData.origin_city} - ${formData.destination_city}`,
        service_type: formData.service_type,
        origin: `${formData.origin_address}, ${formData.origin_city}`,
        destination: `${formData.destination_address}, ${formData.destination_city}`,
        publication_time: new Date().toISOString(),
        status: formData.assigned_driver_id && formData.assigned_driver_id !== 'dispatcher' ? 'taken' : 'available',
        assigned_driver_id: driver?.id,
        assigned_driver_name: driver?.full_name,
        assigned_driver_phone: driver?.phone,
        client_name: client?.full_name || 'לקוח מזדמן',
        client_id: client?.id,
        contact_phone: formData.contact_phone,
        estimated_price: parseFloat(formData.price) || 0,
        notes: formData.notes,
        channel_id: formData.channel_id === 'all_channels' ? null : formData.channel_id,
    };
    
    try {
        await Tender.create(tenderData);
        if (onDeliveryCreated) {
          onDeliveryCreated();
        } else {
          setOpen(false);
        }
    } catch(error) {
        console.error("Failed to create tender:", error);
    }
  };

  return (
    <>
      <style>{`
        :root {
            --primary-bg-modal: #f8f9fa;
            --modal-bg: #ffffff;
            --text-dark-modal: #212529;
            --text-muted-modal: #6c757d;
            --accent-color-modal: #fef8e7;
            --accent-border-modal: #f0dca4;
            --accent-strong-modal: #fdd85d;
            --border-color-modal: #e9ecef;
        }
        .modal-body-new-delivery {
            padding: 1.5rem 2rem;
            overflow-y: auto;
            background-color: var(--primary-bg-modal);
            max-height: 75vh;
        }
        .form-section {
            margin-bottom: 2rem;
        }
        .form-section:last-child {
            margin-bottom: 0;
        }
        .form-section h4 {
            font-weight: 500;
            margin-top: 0;
            margin-bottom: 1rem;
        }
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        .form-group.full-span {
            grid-column: 1 / -1;
        }
        .form-group label {
            font-size: 0.9rem;
            color: var(--text-muted-modal);
        }
        .required {
            color: #dc3545;
        }
        .input-with-icon {
            position: relative;
        }
        .input-with-icon.full-width {
            margin-bottom: 1.5rem;
        }
        .input-with-icon .icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted-modal);
            pointer-events: none;
        }
        .input-with-icon.currency .icon {
            right: 12px;
            left: auto;
        }
        .location-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        .location-box {
            background-color: var(--modal-bg);
            border: 1px solid var(--border-color-modal);
            border-radius: 8px;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .location-box h5 {
            font-weight: 500;
            margin: 0;
            text-align: center;
        }
        .location-box .input-with-icon input {
            background-color: var(--primary-bg-modal);
        }
        .payment-section {
            background: var(--modal-bg);
            padding: 1.5rem;
            border-radius: 8px;
            border: 1px solid var(--border-color-modal);
        }
        .payment-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        .payment-amount {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .payment-amount label {
            font-weight: 500;
        }
        .payment-amount input {
            width: 120px;
            text-align: right;
            padding-left: 2rem;
        }
        .toggle-switch-label { display: flex; align-items: center; gap: 0.75rem; color: var(--text-muted-modal); font-weight: 500; }
        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            padding: 1rem 2rem;
            border-top: 1px solid var(--border-color-modal);
            background-color: var(--primary-bg-modal);
        }
        .btn {
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 700;
            font-size: 1rem;
            cursor: pointer;
        }
        .btn-save {
            background-color: var(--accent-strong-modal);
            border: 1px solid var(--accent-strong-modal);
            color: var(--text-dark-modal);
        }
        .btn-cancel {
            background-color: var(--accent-color-modal);
            border: 1px solid var(--accent-border-modal);
            color: var(--text-dark-modal);
        }
      `}</style>
      <form onSubmit={handleSubmit}>
        <div className="modal-body-new-delivery">
            <section className="form-section">
                <h4>פרטי שליחות</h4>
                <div className="form-group full-span">
                    <label>שיוך לערוץ</label>
                    <Select value={formData.channel_id} onValueChange={(value) => handleChange('channel_id', value)}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="all_channels">כל הערוצים</SelectItem>
                            {channels.map(channel => (
                                <SelectItem key={channel.id} value={channel.id}>
                                    {channel.channel_name || channel.channel_nickname}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>
                <div className="form-grid">
                    <div className="form-group">
                        <label>סוג שירות</label>
                        <Select value={formData.service_type} onValueChange={(value) => handleChange('service_type', value)}>
                            <SelectTrigger><SelectValue /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="delivery">משלוח</SelectItem>
                                <SelectItem value="special">מיוחד</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="form-group">
                        <label>שיוך השליחות לנהג</label>
                        <Select value={formData.assigned_driver_id} onValueChange={(value) => handleChange('assigned_driver_id', value)}>
                            <SelectTrigger><SelectValue /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="dispatcher">מוקדן</SelectItem>
                                {drivers.map(driver => (
                                    <SelectItem key={driver.id} value={driver.id}>{driver.full_name}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="form-group">
                        <label>סוג לקוח</label>
                        <Select value={formData.client_type} onValueChange={handleClientTypeChange}>
                            <SelectTrigger><SelectValue /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="casual">מזדמן</SelectItem>
                                <SelectItem value="regular">קבוע</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                     <div className="form-group">
                        <label>בחירת לקוח</label>
                        <Select value={formData.client_id} onValueChange={handleClientChange} disabled={formData.client_type === 'casual'}>
                            <SelectTrigger><SelectValue placeholder="בחר לקוח" /></SelectTrigger>
                            <SelectContent>
                                {filteredClients.map(client => <SelectItem key={client.id} value={client.id}>{client.full_name}</SelectItem>)}
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="form-group full-span">
                        <label>טלפון ליצירת קשר <span className="required">*</span></label>
                        <Input type="text" value={formData.contact_phone} onChange={(e) => handleChange('contact_phone', e.target.value)} required />
                    </div>
                </div>
            </section>

            <section className="form-section">
                <h4>תכנון שליחות</h4>
                <div className="location-grid">
                    <div className="location-box">
                        <h5>איסוף</h5>
                        <div className="input-with-icon"><Input type="text" placeholder="כתובת *" value={formData.origin_address} onChange={(e) => handleChange('origin_address', e.target.value)} required /><Pencil size={16} className="icon" /></div>
                        <div className="input-with-icon"><Input type="text" placeholder="עיר *" value={formData.origin_city} onChange={(e) => handleChange('origin_city', e.target.value)} required /><Pencil size={16} className="icon" /></div>
                    </div>
                     <div className="location-box">
                        <h5>מסירה</h5>
                        <div className="input-with-icon"><Input type="text" placeholder="כתובת *" value={formData.destination_address} onChange={(e) => handleChange('destination_address', e.target.value)} required /><Pencil size={16} className="icon" /></div>
                        <div className="input-with-icon"><Input type="text" placeholder="עיר *" value={formData.destination_city} onChange={(e) => handleChange('destination_city', e.target.value)} required /><Pencil size={16} className="icon" /></div>
                    </div>
                </div>
            </section>

             <section className="form-section payment-section">
                <div className="payment-controls">
                    <label className="toggle-switch-label">
                        <span>מיידי</span>
                        <Switch checked={!formData.is_immediate} onCheckedChange={(checked) => handleChange('is_immediate', !checked)} />
                        <span>מתוזמן</span>
                    </label>
                    <div className="payment-amount">
                        <label>סכום לתשלום: <span className="required">*</span></label>
                        <div className="input-with-icon currency">
                            <Input type="number" value={formData.price} onChange={(e) => handleChange('price', e.target.value)} required />
                            <CircleDollarSign size={16} className="icon" />
                        </div>
                    </div>
                </div>
                <div className="form-group notes">
                    <label>הערות לנהג</label>
                    <div className="input-with-icon">
                        <Textarea value={formData.notes} onChange={(e) => handleChange('notes', e.target.value)} />
                        <Pencil size={16} className="icon" />
                    </div>
                </div>
            </section>
        </div>

        <footer className="modal-footer">
            <Button type="button" variant="outline" onClick={() => setOpen(false)} className="btn btn-cancel">ביטול</Button>
            <Button type="submit" className="btn btn-save">צור שליחות חדשה</Button>
        </footer>
      </form>
    </>
  );
}
